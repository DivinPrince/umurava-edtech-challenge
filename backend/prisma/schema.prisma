datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Challenge {
  id                  String        @id @default(auto()) @map("_id") @db.ObjectId
  slug                String        @unique
  title               String
  description         String
  deadline            DateTime
  duration            String
  prize               Int
  contactEmail        String
  projectBrief        String
  projectDescription  String
  projectRequirements String
  skillsRequired      String[]
  seniorityLevers     String[]
  deliverables        String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  submissions         Submission[]
}

model Submission {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  userId      String
  challengeId String    @db.ObjectId
  content     String
  status      String    @default("PENDING") // PENDING, APPROVED, REJECTED
  feedback    String?
  submittedAt DateTime  @default(now())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)

  @@unique([userId, challengeId])
  @@map("submission")
}

model User {
  id            String        @id @map("_id")
  name          String
  email         String
  emailVerified Boolean
  skills        String[]
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  submissions   Submission[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id @map("_id")
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id @map("_id")
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id @map("_id")
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
